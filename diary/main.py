import logging
import asyncio
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder
import aiosqlite

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class DiaryStates(StatesGroup):
    AWAITING_SUBJECT_NAME = State()
    AWAITING_GRADE = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    async with aiosqlite.connect('diary.db') as db:
        await db.execute('''
            CREATE TABLE IF NOT EXISTS subjects (
                subject_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                subject_name TEXT UNIQUE,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS grades (
                grade_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                subject_id INTEGER,
                grade INTEGER CHECK(grade BETWEEN 1 AND 5),
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                FOREIGN KEY(subject_id) REFERENCES subjects(subject_id)
            )
        ''')
        await db.execute('''
            CREATE TABLE IF NOT EXISTS schedule (
                schedule_id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                day_of_week TEXT CHECK(day_of_week IN ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞')),
                subject_name TEXT,
                time TEXT,
                created_at DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        await db.commit()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
        cursor = await db.execute('SELECT COUNT(*) FROM subjects WHERE user_id = 0')
        subjects_count = await cursor.fetchone()
        if subjects_count[0] == 0:
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            subjects = [
                '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è', '–§–∏–∑–∏–∫–∞', '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞',
                '–ì–µ–æ–º–µ—Ç—Ä–∏—è', '–ò—Å—Ç–æ—Ä–∏—è', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫', '–ë–∏–æ–ª–æ–≥–∏—è',
                '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π (–∞–Ω–≥–ª.)', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞', '–•–∏–º–∏—è', '–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞',
                '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ', '–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
            ]
            for subject in subjects:
                await db.execute('''
                    INSERT OR IGNORE INTO subjects (user_id, subject_name)
                    VALUES (?, ?)
                ''', (0, subject))  # user_id = 0 –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
            await db.commit()

        cursor = await db.execute('SELECT COUNT(*) FROM schedule WHERE user_id = 0')
        schedule_count = await cursor.fetchone()
        if schedule_count[0] == 0:
            # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤
            static_schedule = [
                # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - –ü—è—Ç–Ω–∏—Ü–∞
                ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '08:20-09:00', '–†–∞–∑–≥–æ–≤–æ—Ä –æ –≤–∞–∂–Ω–æ–º'),
                ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '09:10-09:50', '–ì–µ–æ–≥—Ä–∞—Ñ–∏—è'),
                ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '10:00-10:40', '–§–∏–∑–∏–∫–∞'),
                ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '11:00-11:40', '–§–∏–∑–∏–∫–∞'),
                ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '12:00-12:40', '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞'),
                ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '12:50-13:30', '–ì–µ–æ–º–µ—Ç—Ä–∏—è'),
                ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '13:40-14:20', '–ò—Å—Ç–æ—Ä–∏—è'),
                ('–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '14:30-15:10', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'),
                # –í—Ç–æ—Ä–Ω–∏–∫
                ('–í—Ç–æ—Ä–Ω–∏–∫', '08:20-09:00', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'),
                ('–í—Ç–æ—Ä–Ω–∏–∫', '09:10-09:50', '–†—É—Å—Å–∫–∏–π —è–∑—ã–∫'),
                ('–í—Ç–æ—Ä–Ω–∏–∫', '10:00-10:40', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'),
                ('–í—Ç–æ—Ä–Ω–∏–∫', '11:00-11:40', '–ë–∏–æ–ª–æ–≥–∏—è'),
                ('–í—Ç–æ—Ä–Ω–∏–∫', '12:00-12:40', '–ò—Å—Ç–æ—Ä–∏—è'),
                ('–í—Ç–æ—Ä–Ω–∏–∫', '12:50-13:30', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π (–∞–Ω–≥–ª.)'),
                ('–í—Ç–æ—Ä–Ω–∏–∫', '13:40-14:20', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π (–∞–Ω–≥–ª.)'),
                # –°—Ä–µ–¥–∞
                ('–°—Ä–µ–¥–∞', '09:10-09:50', '–§–∏–∑–∏–∫–∞'),
                ('–°—Ä–µ–¥–∞', '10:00-10:40', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'),
                ('–°—Ä–µ–¥–∞', '11:00-11:40', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'),
                ('–°—Ä–µ–¥–∞', '12:00-12:40', '–•–∏–º–∏—è'),
                ('–°—Ä–µ–¥–∞', '12:50-13:30', '–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞'),
                ('–°—Ä–µ–¥–∞', '13:40-14:20', '–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞'),
                # –ß–µ—Ç–≤–µ—Ä–≥
                ('–ß–µ—Ç–≤–µ—Ä–≥', '09:10-09:50', '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞'),
                ('–ß–µ—Ç–≤–µ—Ä–≥', '10:00-10:40', '–§–∏–∑–∏–∫–∞'),
                ('–ß–µ—Ç–≤–µ—Ä–≥', '11:00-11:40', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'),
                ('–ß–µ—Ç–≤–µ—Ä–≥', '12:00-12:40', '–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞'),
                ('–ß–µ—Ç–≤–µ—Ä–≥', '12:50-13:30', '–ê–ª–≥–µ–±—Ä–∞ –∏ –Ω–∞—á–∞–ª–∞ –∞–Ω–∞–ª–∏–∑–∞'),
                ('–ß–µ—Ç–≤–µ—Ä–≥', '14:30-15:10', '–†–æ—Å—Å–∏—è - –º–æ–∏ –≥–æ—Ä–∏–∑–æ–Ω—Ç—ã'),
                # –ü—è—Ç–Ω–∏—Ü–∞
                ('–ü—è—Ç–Ω–∏—Ü–∞', '09:10-09:50', '–§–∏–∑–∏—á–µ—Å–∫–∞—è –∫—É–ª—å—Ç—É—Ä–∞'),
                ('–ü—è—Ç–Ω–∏—Ü–∞', '10:00-10:40', '–ì–µ–æ–º–µ—Ç—Ä–∏—è'),
                ('–ü—è—Ç–Ω–∏—Ü–∞', '11:00-11:40', '–§–∏–∑–∏–∫–∞'),
                ('–ü—è—Ç–Ω–∏—Ü–∞', '12:00-12:40', '–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞'),
                ('–ü—è—Ç–Ω–∏—Ü–∞', '12:50-13:30', '–ì–µ–æ–º–µ—Ç—Ä–∏—è'),
                ('–ü—è—Ç–Ω–∏—Ü–∞', '13:40-14:20', '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –ø—Ä–æ–µ–∫—Ç'),
                # –°—É–±–±–æ—Ç–∞ (–ø–µ—Ä–µ–º–µ–Ω—ã –ø–æ 10 –º–∏–Ω—É—Ç)
                ('–°—É–±–±–æ—Ç–∞', '08:20-09:00', '–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ'),
                ('–°—É–±–±–æ—Ç–∞', '09:10-09:50', '–û—Å–Ω–æ–≤—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∂–∏–∑–Ω–µ–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏'),
                ('–°—É–±–±–æ—Ç–∞', '10:00-10:40', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'),
                ('–°—É–±–±–æ—Ç–∞', '10:50-11:30', '–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞'),
                ('–°—É–±–±–æ—Ç–∞', '11:40-12:20', '–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'),
                ('–°—É–±–±–æ—Ç–∞', '12:30-13:10', '–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π (–∞–Ω–≥–ª.)'),
            ]
            for day, time, subject in static_schedule:
                await db.execute('''
                    INSERT OR IGNORE INTO schedule (user_id, day_of_week, time, subject_name)
                    VALUES (?, ?, ?, ?)
                ''', (0, day, time, subject))  # user_id = 0 –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
            await db.commit()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu_kb():
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(text="üî¢ –î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="add_grade"),
        types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="delete_grade")
    )
    builder.row(
        types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"),
        types.InlineKeyboardButton(text="üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ", callback_data="schedule_menu")
    )
    return builder.as_markup()

# –ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
async def schedule_menu_kb():
    builder = InlineKeyboardBuilder()
    days = ['–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', '–í—Ç–æ—Ä–Ω–∏–∫', '–°—Ä–µ–¥–∞', '–ß–µ—Ç–≤–µ—Ä–≥', '–ü—è—Ç–Ω–∏—Ü–∞', '–°—É–±–±–æ—Ç–∞']
    for day in days:
        builder.button(text=day, callback_data=f"schedule_{day}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(2)
    return builder.as_markup()

@router.message(F.text == '/start')
async def cmd_start(message: types.Message):
    await message.answer(
        "üìñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –¥–Ω–µ–≤–Ω–∏–∫!\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
        reply_markup=await main_menu_kb()
    )

@router.callback_query(F.data == "main_menu")
async def return_main_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=await main_menu_kb()
    )

@router.callback_query(F.data == "schedule_menu")
async def schedule_menu(callback: types.CallbackQuery):
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:",
        reply_markup=await schedule_menu_kb()
    )

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
@router.callback_query(F.data == "add_grade")
async def start_add_grade(callback: types.CallbackQuery):
    async with aiosqlite.connect('diary.db') as db:
        cursor = await db.execute(
            'SELECT subject_id, subject_name FROM subjects WHERE user_id IN (?, 0)',  # –î–æ–±–∞–≤–ª–µ–Ω–æ user_id = 0
            (callback.from_user.id,)
        )
        subjects = await cursor.fetchall()
    
    if not subjects:
        return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã!", show_alert=True)
    
    builder = InlineKeyboardBuilder()
    for subj_id, name in subjects:
        builder.button(text=name, callback_data=f"grade_subj_{subj_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üìù –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("grade_subj_"))
async def select_grade(callback: types.CallbackQuery, state: FSMContext):
    subject_id = callback.data.split("_")[-1]
    await state.update_data(current_subject=subject_id)
    
    builder = InlineKeyboardBuilder()
    for grade in range(1, 6):
        builder.button(text=str(grade), callback_data=f"set_grade_{grade}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="add_grade")
    builder.adjust(5)
    
    await callback.message.edit_text(
        "üî¢ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("set_grade_"))
async def save_grade(callback: types.CallbackQuery, state: FSMContext):
    grade = callback.data.split("_")[-1]
    data = await state.get_data()
    
    async with aiosqlite.connect('diary.db') as db:
        await db.execute(
            'INSERT INTO grades (user_id, subject_id, grade) VALUES (?, ?, ?)',
            (callback.from_user.id, data['current_subject'], grade)
        )
        await db.commit()
    
    await callback.answer(f"‚úÖ –û—Ü–µ–Ω–∫–∞ {grade} –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
    await state.clear()
    await return_main_menu(callback)

# –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
@router.callback_query(F.data == "delete_grade")
async def start_delete_grade(callback: types.CallbackQuery):
    async with aiosqlite.connect('diary.db') as db:
        cursor = await db.execute(
            'SELECT subject_id, subject_name FROM subjects WHERE user_id IN (?, 0)',  # –î–æ–±–∞–≤–ª–µ–Ω–æ user_id = 0
            (callback.from_user.id,)
        )
        subjects = await cursor.fetchall()
    
    if not subjects:
        return await callback.answer("–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–¥–º–µ—Ç—ã!", show_alert=True)
    
    builder = InlineKeyboardBuilder()
    for subj_id, name in subjects:
        builder.button(text=name, callback_data=f"delete_grade_subj_{subj_id}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(2)
    
    await callback.message.edit_text(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("delete_grade_subj_"))
async def select_grade_to_delete(callback: types.CallbackQuery):
    subject_id = callback.data.split("_")[-1]
    async with aiosqlite.connect('diary.db') as db:
        cursor = await db.execute('''
            SELECT g.grade_id, g.grade, g.created_at
            FROM grades g
            WHERE g.user_id = ? AND g.subject_id = ?
            ORDER BY g.created_at DESC
        ''', (callback.from_user.id, subject_id))
        grades = await cursor.fetchall()
    
    if not grades:
        return await callback.answer("–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É", show_alert=True)
    
    builder = InlineKeyboardBuilder()
    for grade_id, grade, created_at in grades:
        builder.button(
            text=f"–û—Ü–µ–Ω–∫–∞: {grade} ({created_at[:10]})",
            callback_data=f"confirm_delete_grade_{grade_id}"
        )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="delete_grade")
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=builder.as_markup()
    )

@router.callback_query(F.data.startswith("confirm_delete_grade_"))
async def confirm_delete_grade(callback: types.CallbackQuery):
    grade_id = callback.data.split("_")[-1]
    async with aiosqlite.connect('diary.db') as db:
        await db.execute('DELETE FROM grades WHERE grade_id = ? AND user_id = ?', (grade_id, callback.from_user.id))
        await db.commit()
    
    await callback.answer("‚úÖ –û—Ü–µ–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!")
    await start_delete_grade(callback)

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
@router.callback_query(F.data == "stats")
async def show_stats(callback: types.CallbackQuery):
    async with aiosqlite.connect('diary.db') as db:
        cursor = await db.execute('''
            SELECT s.subject_name, 
                   AVG(g.grade), 
                   COUNT(g.grade),
                   MAX(g.created_at)
            FROM grades g
            JOIN subjects s ON g.subject_id = s.subject_id
            WHERE g.user_id = ?
            GROUP BY s.subject_name
        ''', (callback.from_user.id,))
        stats = await cursor.fetchall()
    
    if not stats:
        return await callback.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫", show_alert=True)
    
    response = "üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    for subject, avg, count, last_date in stats:
        response += (
            f"üìö {subject}:\n"
            f"‚ñ∏ –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª: {avg:.2f}\n"
            f"‚ñ∏ –í—Å–µ–≥–æ –æ—Ü–µ–Ω–æ–∫: {count}\n"
            f"‚ñ∏ –ü–æ—Å–ª–µ–¥–Ω—è—è: {last_date[:10]}\n\n"
        )
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardBuilder().button(
            text="üîô –ù–∞–∑–∞–¥", 
            callback_data="main_menu"
        ).as_markup()
    )

# –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ
@router.callback_query(F.data.startswith("schedule_"))
async def show_day_schedule(callback: types.CallbackQuery):
    day = callback.data.split("_")[-1]
    async with aiosqlite.connect('diary.db') as db:
        cursor = await db.execute('''
            SELECT time, subject_name
            FROM schedule
            WHERE user_id = ? AND day_of_week = ?
            ORDER BY time
        ''', (0, day))  # user_id = 0 –¥–ª—è —Å—Ç–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule = await cursor.fetchall()
    
    if not schedule:
        return await callback.answer(f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day} –ø—É—Å—Ç–æ", show_alert=True)
    
    response = f"üóì –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {day}:\n\n"
    for time, subject in schedule:
        response += f"‚è∞ {time} - {subject}\n"
    
    await callback.message.edit_text(
        response,
        reply_markup=InlineKeyboardBuilder()
        .button(text="üîô –ù–∞–∑–∞–¥", callback_data="schedule_menu")
        .as_markup()
    )

async def main():
    await init_db()
    
    bot = Bot(token="TOKENBOT")
    dp = Dispatcher()
    dp.include_router(router)
    
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    asyncio.run(main())